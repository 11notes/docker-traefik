name: "reverse-proxy"
services:
  socket-proxy:
    # this image is used to expose the docker socket as read-only to traefik
    # you can check https://github.com/11notes/docker-socket-proxy for all details
    image: "11notes/socket-proxy:2.1.2"
    read_only: true
    user: "0:0" 
    environment:
      TZ: "Europe/Zurich"
    volumes:
      - "/run/docker.sock:/run/docker.sock:ro" 
      - "socket-proxy.run:/run/proxy"
    restart: "always"

  errors:
    # this image can be used to display a simple error message since Traefik canâ€™t serve content
    image: "11notes/traefik:errors"
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.default-errors.loadbalancer.server.port=8080"
    environment:
      TZ: "Europe/Zurich"
    networks:
      backend:
    restart: "always"

  traefik:
    image: "11notes/traefik:3.3.6"
    read_only: true
    labels:
      - "traefik.enable=true"

      # example on how to secure the traefik dashboard and api
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_FQDN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.routers.dashboard.entrypoints=https"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$2a$$12$$ktgZsFQZ0S1FeQbI1JjS9u36fAJMHDQaY6LNi9EkEp8sKtP5BK43C" # admin / traefik, please change!

      # default ratelimit
      - "traefik.http.middlewares.default-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.default-ratelimit.ratelimit.burst=120"
      - "traefik.http.middlewares.default-ratelimit.ratelimit.period=1s"

      # default allowlist
      - "traefik.http.middlewares.default-ipallowlist-RFC1918.ipallowlist.sourcerange=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"

      # default catch-all router
      - "traefik.http.routers.default.rule=HostRegexp(`.+`)"
      - "traefik.http.routers.default.priority=1"
      - "traefik.http.routers.default.entrypoints=https"
      - "traefik.http.routers.default.tls=true"
      - "traefik.http.routers.default.service=default-errors"

      # default http to https
      # if you need a http website, don't worry, this router has priority 1
      - "traefik.http.middlewares.default-http.redirectscheme.permanent=true"
      - "traefik.http.middlewares.default-http.redirectscheme.scheme=https"
      - "traefik.http.routers.default-http.priority=1"
      - "traefik.http.routers.default-http.rule=HostRegexp(`.+`)"
      - "traefik.http.routers.default-http.entrypoints=http"
      - "traefik.http.routers.default-http.middlewares=default-http"
      - "traefik.http.routers.default-http.service=default-http"
      - "traefik.http.services.default-http.loadbalancer.passhostheader=true"

      # default errors
      - "traefik.http.middlewares.default-errors.errors.status=402-599"
      - "traefik.http.middlewares.default-errors.errors.query=/{status}"
      - "traefik.http.middlewares.default-errors.errors.service=default-errors"
    depends_on:
      socket-proxy:
        condition: "service_healthy"
        restart: true
    environment:
      TZ: "Europe/Zurich"
    command:
      - "--ping.terminatingStatusCode=204" # ping is needed for the health check to work!
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=false" # disable insecure api and dashboard access
      - "--log.level=INFO"
      - "--log.format=json"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.file.directory=/traefik/var"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.http.http.middlewares=default-errors,default-ratelimit,default-ipallowlist-RFC1918"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.https.http.middlewares=default-errors,default-ratelimit,default-ipallowlist-RFC1918"
      - "--serversTransport.insecureSkipVerify=true" # disable upstream HTTPS certificate checks (https > https)
      - "--experimental.plugins.rewriteResponseHeaders.moduleName=github.com/jamesmcroft/traefik-plugin-rewrite-response-headers"
      - "--experimental.plugins.rewriteResponseHeaders.version=v1.1.2"
      - "--experimental.plugins.geoblock.moduleName=github.com/PascalMinder/geoblock"
      - "--experimental.plugins.geoblock.version=v0.3.2"
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
    volumes:
      - "var:/traefik/var"
      - "socket-proxy.run:/var/run" # access docker socket via proxy read-only
      - "plugins:/plugins-storage" # plugins stored as volume because of read-only
    networks:
      backend:
      frontend:
    sysctls:
      net.ipv4.ip_unprivileged_port_start: 80 # allow rootless container to access port 80 and higher
    restart: "always"

  nginx: # example container
    image: "11notes/nginx:stable"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx-example.rule=Host(`${NGINX_FQDN}`)"
      - "traefik.http.routers.nginx-example.entrypoints=https"
      - "traefik.http.routers.nginx-example.tls=true"
      - "traefik.http.routers.nginx-example.service=nginx-example"
      - "traefik.http.services.nginx-example.loadbalancer.server.port=3000"
    networks:
      backend:
    restart: "always"

volumes:
  var:
  plugins:
  socket-proxy.run:

networks:
  frontend:
  backend:
    internal: true